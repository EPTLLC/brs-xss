# Project: BRS-XSS (XSS Detection Suite)
# Company: EasyProTech LLC (www.easypro.tech)
# Dev: Brabus
# Date: Wed 04 Sep 2025 10:25:00 MSK
# Status: Created
# Telegram: https://t.me/EasyProTech

name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Verify version consistency (tag vs pyproject vs __init__)
      run: |
        TAG="${GITHUB_REF#refs/tags/}"
        echo "Git tag: $TAG"
        PY_VER=$(python -c "import tomllib;print(tomllib.load(open('pyproject.toml','rb'))['project']['version'])")
        INIT_VER=$(python -c "import re;import io;print(re.search(r'__version__\\s*=\\s*[\'\"]([^\'\"]+)[\'\"]', io.open('brsxss/__init__.py','r',encoding='utf-8').read()).group(1))")
        echo "pyproject: $PY_VER"
        echo "__init__:   $INIT_VER"
        if [ "${TAG#v}" != "$PY_VER" ]; then
          echo "ERROR: Tag ${TAG} does not match pyproject version ${PY_VER}"; exit 1;
        fi
        if [ "$INIT_VER" != "$PY_VER" ]; then
          echo "ERROR: __init__ version ${INIT_VER} does not match pyproject ${PY_VER}"; exit 1;
        fi

    - name: Install dependencies
      run: |
        pip install -U pip wheel
        pip install -r requirements/dev.txt
        pip install -e .
        
    - name: Quality gates
      run: |
        ruff check .
        # mypy disabled for release - will fix in future versions
        
    - name: Test with coverage
      run: |
        coverage run -m pytest -q --maxfail=1
        coverage report --fail-under=30
        
    - name: SARIF smoke test
      run: |
        brs-xss scan "http://httpbin.org/get?test=value" -o test.sarif --timeout 10 || true
        if [ -f "test.sarif" ]; then
          python -c "import json; data=json.load(open('test.sarif')); assert data.get('version')=='2.1.0'; assert 'runs' in data; print('SARIF 2.1.0 Enterprise Validation: PASSED')"
        fi

  docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
    - name: Build and push multi-arch
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/eptllc/brs-xss:latest
          ghcr.io/eptllc/brs-xss:${{ steps.version.outputs.version }}
          
    - name: Install cosign and syft
      uses: sigstore/cosign-installer@v3
      
    - name: Install syft for SBOM
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
    - name: Generate SBOM
      run: |
        # Generate SBOM only - cosign signing disabled due to OIDC issues
        syft dir:. -o spdx-json > sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ steps.version.outputs.version }}
        path: sbom.spdx.json

  pypi:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Build package
      run: |
        pip install build
        python -m build
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  github-release:
    needs: [docker, pypi]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog snippet
      id: changelog
      run: |
        CURR="${GITHUB_REF#refs/tags/}"
        echo "Generating changelog for ${CURR}"
        PREV=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        FILE="CHANGELOG-${CURR}.md"
        echo "# ${CURR} â€“ Changelog" > "$FILE"
        if [ -n "$PREV" ]; then
          echo "\nChanges since ${PREV}:\n" >> "$FILE"
          git log --pretty=format:'- %s (%h)' ${PREV}..HEAD >> "$FILE"
        else
          echo "\nInitial release notes (all commits):\n" >> "$FILE"
          git log --pretty=format:'- %s (%h)' >> "$FILE"
        fi
        echo "file=$FILE" >> $GITHUB_OUTPUT

    - name: Create GitHub Release with autogenerated notes
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: ${{ github.ref_name }}
        body_path: ${{ steps.changelog.outputs.file }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}